vector<vector<int>> Func2(vector < vector<int>>& arr) {
	if (arr.empty() == 0) {
		return arr;
	}
	vector<vector<int>> tmp(arr);
	for (int i = 0; i < arr.size(); ++i) {
		int count = 0;
		for (int j = arr[0].size() - 1; j >= 0; j--) {
			tmp[i][count] = !arr[i][j];
			++count;
		}
	}
	return tmp;
}


typedef struct TreeNode {

	TreeNode *lchild;
	TreeNode *rchild;
	int _data;
	TreeNode(int data) :_data(data),
};
int GetDepth(TreeNode * root) {
	if (root == NULL) {
		return 0;
	}
	return (max(GetDepth(root->lchild), GetDepth(root->rchild)) + 1);
}
#include <queue>
int GetDepth(TreeNode * root) {
	if (root == NULL) {
		return 0;
	}
	queue<TreeNode*> q;
	q.push(root);
	int depth = 0;
	while (!q.empty()) {
		int len = q.size();
		depth++;
		while (len--) {
			TreeNode *tmp = q.front();
			q.pop();
			if (tmp->lchild) q.push(tmp->lchild);
			if (tmp->rchild) q.push(tmp->rchild);
		}
	}
	return depth;
}
typedef struct ListNode{

	ListNode *next;
	int _data;
	ListNode(int data) :_data(data), next(nullptr){}
};
ListNode* Get(ListNode* Head) {
	if (Head == NULL) {
		return;
	}
	ListNode *slow = Head;
	ListNode *fast = Head;
	while (fast || fast->next) {
		fast = fast->next->next;
		slow = slow->next;
		if (fast == slow) {
			ListNode *tmp = Head;
			while (tmp != fast) {
				tmp = tmp->next;
				fast = fast->next;
			}
			return tmp;
		}
	}
}

int area(int r){
	if (r <= 1)  return 0;
	int count = 0;
	for (int i = 1; i <= r; i++)
	for (int j = 1; j <= r; j++){
		double distance = Math.sqrt(i * i + j * j);
		if (distance <= r) count++;
	}
	return 4 * count;
}
